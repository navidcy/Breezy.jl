var documenterSearchIndex = {"docs":
[{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/#Thermodynamics","page":"API","title":"Thermodynamics","text":"","category":"section"},{"location":"api/#Breeze.Thermodynamics.AtmosphereThermodynamics","page":"API","title":"Breeze.Thermodynamics.AtmosphereThermodynamics","text":"AtmosphereThermodynamics(FT = Oceananigans.defaults.FloatType;\n                         gravitational_acceleration = 9.81,\n                         molar_gas_constant = 8.314462618,\n                         dry_air_molar_mass = 0.02897,\n                         dry_air_heat_capacity = 1005,\n                         vapor_molar_mass = 0.018015,\n                         vapor_heat_capacity = 1850,\n                         saturation = Saturation(FT),\n                         condensation = water_condensation(FT),\n                         deposition = water_deposition(FT))\n\nCreate AtmosphereThermodynamics with parameters that correpsond to the composition of dry air in Earth's atmosphere and water vapor. The default isnothing(condensation) implies thermodynamics appropriate for unsaturated and therefore non-condensing air.\n\n\n\n\n\n","category":"type"},{"location":"api/#Breeze.Thermodynamics.saturation_vapor_pressure","page":"API","title":"Breeze.Thermodynamics.saturation_vapor_pressure","text":"saturation_vapor_pressure(T, thermo)\n\nCompute the saturation vapor pressure over a liquid surface by integrating the Clausius-Clapeyron relation,\n\ndpdT = ℒᵛ  (Rᵛ T^2)\n\n\n\n\n\n","category":"function"},{"location":"#Breeze.jl","page":"Home","title":"Breeze.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Breeze.jl","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Breeze.jl is a Julia package for finite volume GPU and CPU large eddy simulations (LES) of atmospheric flows. Under the hood, Breeze's abstractions, design, and finite volume engine are based on Oceananigans.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Breeze provides two ways to simulate atmospheric flows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A MoistAirBuoyancy that can be used with Oceananigans' NonhydrostaticModel to simulate atmospheric flows with the Boussinesq approximation.\nA prototype AtmosphereModel, which uses the anelastic approximation following Pauluis 2008.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use Breeze, install directly from github:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"https://github.com/NumericalEarth/Breeze.jl.git\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A basic free convection simulation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Oceananigans\nusing Oceananigans.Units\nusing CairoMakie\nusing Breeze\n\nNx = Nz = 64\nLz = 4 * 1024\ngrid = RectilinearGrid(CPU(), size=(Nx, Nz), x=(0, 2Lz), z=(0, Lz), topology=(Periodic, Flat, Bounded))\n\nreference_constants = Breeze.Thermodynamics.ReferenceConstants(base_pressure=1e5, potential_temperature=288)\nbuoyancy = Breeze.MoistAirBuoyancy(; reference_constants)\n\nQ₀ = 1000 # heat flux in W / m²\nρ₀ = Breeze.MoistAirBuoyancies.base_density(buoyancy) # air density at z=0\ncₚ = buoyancy.thermodynamics.dry_air.heat_capacity\nθ_bcs = FieldBoundaryConditions(bottom=FluxBoundaryCondition(Q₀ / (ρ₀ * cₚ)))\nq_bcs = FieldBoundaryConditions(bottom=FluxBoundaryCondition(1e-2))\n\nadvection = WENO()\ntracers = (:θ, :q)\nmodel = NonhydrostaticModel(; grid, advection, buoyancy,\n                            tracers = (:θ, :q),\n                            boundary_conditions = (θ=θ_bcs, q=q_bcs))\n\nΔθ = 5 # K\nTₛ = reference_constants.reference_potential_temperature # K\nθᵢ(x, z) = Tₛ + Δθ * z / grid.Lz + 1e-2 * Δθ * randn()\nqᵢ(x, z) = 0 # 1e-2 + 1e-5 * rand()\nset!(model, θ=θᵢ, q=qᵢ)\n\nsimulation = Simulation(model, Δt=10, stop_time=2hours)\nconjure_time_step_wizard!(simulation, cfl=0.7)\n\nrun!(simulation)\n\nT = Breeze.TemperatureField(model)\nheatmap(T)","category":"page"}]
}
