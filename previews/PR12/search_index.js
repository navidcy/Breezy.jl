var documenterSearchIndex = {"docs":
[{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/#Thermodynamics","page":"API","title":"Thermodynamics","text":"","category":"section"},{"location":"api/#Breeze.Thermodynamics.AtmosphereThermodynamics","page":"API","title":"Breeze.Thermodynamics.AtmosphereThermodynamics","text":"AtmosphereThermodynamics(FT = Oceananigans.defaults.FloatType;\n                         gravitational_acceleration = 9.81,\n                         molar_gas_constant = 8.314462618,\n                         dry_air_molar_mass = 0.02897,\n                         dry_air_heat_capacity = 1005,\n                         vapor_molar_mass = 0.018015,\n                         vapor_heat_capacity = 1850,\n                         saturation = Saturation(FT),\n                         condensation = water_condensation(FT),\n                         deposition = water_deposition(FT))\n\nCreate AtmosphereThermodynamics with parameters that correpsond to the composition of dry air in Earth's atmosphere and water vapor. The default isnothing(condensation) implies thermodynamics appropriate for unsaturated and therefore non-condensing air.\n\n\n\n\n\n","category":"type"},{"location":"api/#Breeze.Thermodynamics.saturation_vapor_pressure","page":"API","title":"Breeze.Thermodynamics.saturation_vapor_pressure","text":"saturation_vapor_pressure(T, thermo)\n\nCompute the saturation vapor pressure over a liquid surface by integrating the Clausius-Clapeyron relation,\n\ndpdT = ℒᵛ  (Rᵛ T^2)\n\n\n\n\n\n","category":"function"},{"location":"#Breeze.jl","page":"Home","title":"Breeze.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Breeze.jl","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Breeze.jl is a Julia package for atmospheric thermodynamics calculations, particularly focused on Large Eddy Simulation (LES) applications.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Accurate thermodynamic calculations\nSaturation vapor pressure computation\nSpecific humidity calculations","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Breeze.jl, use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Breeze\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's a basic example of computing saturation specific humidity:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Breeze\n\n# Create thermodynamics instance\nthermo = Breeze.AtmosphereThermodynamics()\n\n# Calculate saturation specific humidity\nT = 293.15  # Temperature in Kelvin (20°C)\nρ = 1.2     # Density in kg/m³\nq★ = Breeze.saturation_specific_humidity(T, ρ, thermo, thermo.condensation)","category":"page"}]
}
